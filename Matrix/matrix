##################################################################
# Name: Steven Cruz
##################################################################

#!/bin/bash

#######################################
#       helper functions              
#   remove()
#   perror()
#   findRows()
#   findCols()
#   dims()
#   tpose()
#   meanAVG()
#   addInternal()
#   mult()
#######################################

# remove() the cleanup function
function remove(){
  rm -f *.tmp
}

trap remove EXIT

# perror() is the error message function, Takes the argument and sends it to stderr
function perror(){
  status=$1

  echo "Error: $status" 1>&2			#redirect stdout to stdr
  exit 1
}
# findRows() finds the number of rows in the matrix file, assigns it to a return variable
function findRows(){
  input=$1
  rowCount=0
  while read -r line
  do
    rowCount=`expr $rowCount + 1`
  done < $input
  _RET="$rowCount"
}
# findCols() finds the number of columns in the matrix file, assigns it to a return variable
function findCols(){
  input=$1
  colCount=0
  read -r line < $input
  for i in $line
  do
    colCount=`expr $colCount + 1`
  done
  _RET="$colCount"
}

# findDims() function that will find the dimensions of the matrix and echos results to terminal
function findDims(){
  input=$1
 
  findRows $1
  rowCount=$_RET
  findCols $1
  colCount=$_RET

  echo "$rowCount $colCount"
}

# tpose() function will take in the matrix, transpose it, and then assign it to a variable
function tpose(){
  input=$1

  findCols $input                                                   # Added these 2 lines
  colCount=$_RET                                                    # Check if still works

  for ((j=1; j<=$colCount; j++))
  do
    cut -f"$j" "$input" | paste -s >> "outputfileTpose$$.tmp"
  done

  _RET="outputfileTpose$$.tmp"

}

# meanAVG() takes in a matrix and will return the avg of its ROWS (since a TRANSPOSED matrix was passed into mean)
function meanAVG(){
 input=$1

  while read -r line
  do
    rowSum=0
    count=0
      for i in $line
      do
        rowSum=`expr $rowSum + $i`
        count=`expr $count + 1`
      done
    mean=$(( ($rowSum + ($count/2)*( ($rowSum>0)*2-1 )) / $count ))
    printf '%d\t' $mean >> "outputfileAVGcalc$$.tmp"
  done < $input

  noTrailTab=$( cat "outputfileAVGcalc$$.tmp" )                     # Remove the trailing tab, convert the temp outputfile to a string
  noTrailTab=${noTrailTab%?}                                        # and remove the last character. Append the updated string to
  echo "$noTrailTab" >> "outputfileMean$$.tmp"                      # a file and "return" it.
  
  _RET="outputfileMean$$.tmp"
}

# addInternal() will add 2 matricies of the same size
addInternal(){

  #Lmatrix=$1			# Not used, but here for dev clarification
  #Rmatrix=$2

  findRows $1                                                       # Find the rows and cols of the matrix, should be the same so doesnt matter which
  fileRows=$_RET                                                    # Set them to a variable
  findCols $2
  fileCols=$_RET
  currRow=0                                                         # Will be used to keep track of the rows in the while loop, used to tell when the last
                                                                    # row is reached
  
  while read -a leftLine <&3 && read -a rightLine <&4               # While loop to turn each line into an array
  do
    currRow=`expr $currRow + 1`

    for ((i=0; i<$fileCols; i++))                                   # For loop that iterates over the array, based ont he number of columns there are.
    do
      intSum=$(( ${leftLine[$i]} + ${rightLine[$i]} ))
      if [ ! $i == $(( $fileCols - 1 )) ]
      then
        printf '%d\t' $intSum >> "outputFileADD$$.tmp"              # Will either send both number and a tab to the file, until the last enrty for the row, then
      else                                                          # only the number will be sent.
        printf '%d' $intSum >> "outputFileADD$$.tmp"
      fi
    done
    
    if [ ! $currRow == $fileRows ]                                  # Will print a new line as long as there is another row to be input, this avoids having a new
    then                                                            # row that is empty in the file.
      printf "\n" >> "outputFileADD$$.tmp"
    fi

  done 3<$1 4<$2

  _RET="outputFileADD$$.tmp"
}

# mult() takes 2 compatible matricies and multiplies them.  Returns the result file to a variable
function mult(){
  #leftMatrix=$1                                                    # variable names not used but here for clarification
  #rightMatrix=$2                                                   
  
  # result matrix dimensions will be leftMatrixRows x rightMatrixColumns
  findRows $1
  resultRow=$_RET
  findCols $2
  resultCols=$_RET

  # transpose the right matrix, in order to get perform math on each line easier
  tpose $2
  rightMatrixTransposed=$_RET
  
  # get the col count for both the left matrix and the newly transposed right matrix. They are the same.
  findCols $1
  columns=$_RET

  while read -a leftRow
  do
    currColumn=0
    currRow=0

    while read -a rightcolumn                                       # Technically its a row now that its transposed, but for logic sake
    do
      lineSum=0

      for ((i=0; i<columns; i++))
      do
        product=$(( ${leftRow[$i]}*${rightcolumn[$i]} ))	    # Get the sum of the product of the Left line and right line
        lineSum=$(( $lineSum + $product ))
      done

      currColumn=$(( $currColumn + 1 ))
      if [ ! $currColumn == $resultCols ]			    # Output to temp file. with or w/o tab, depending.
      then							    # Repeat until done.
        printf '%d\t' $lineSum >> "outputFileMULT$$.tmp"
      else
        printf '%d' $lineSum >> "outputFileMULT$$.tmp"
      fi   

    done < $rightMatrixTransposed
    
    currRow=$(( $currRow + 1 ))					    # Print new line if not final row
    if [ ! $currRow == $resultRow ]
    then
      printf '\n' >> "outputFileMULT$$.tmp"
    fi    
  done < $1

  _RET="outputFileMULT$$.tmp"
}


##################      End internal functions          #################################################


#### wrapper function that does the heavy lifting  #############################################################
function wrapper(){
  functionName=$1                                                   # get the function name and assign it to a variable

  case $functionName in                                             # use case statements to send it to the appropriate operator

    "dims")
      datafilepath="datafile$$.tmp"

      if [ $# = 1 ]
      then
        cat > "$datafilepath"
      elif [ $# = 2 ]
      then
        datafilepath=$2
      else
        perror "Invalid argument(s).  Too many provided."           # if any other amount is provided, then too many.
      fi

      if [ ! -r $datafilepath ]                                     # check if readable		      
      then
        perror "Cannot read file. Cannot find dims"
      else
        findDims $datafilepath
      fi;;                                                          #this is the last line in the case, must be terminated with ;;  


    "transpose")
      datafilepath="datafile$$.tmp"
      
      if [ $# = 1 ]						    # check if passed via file or pipe. 
      then
        cat > "$datafilepath"
      elif [ $# = 2 ]
      then
        datafilepath=$2						    # Check if valid # of args
      else
        perror "Invalid argument(s). Too many provided."
      fi

      if [ ! -r $datafilepath ]		  			    # Check if readable
      then
        perror "Cannot read file. Cannot transpose."
      else
        tpose $datafilepath
        cat $_RET                                                   # Cat the variable defined in tpose
      fi;;

    "mean")
      datafilePath="datafile$$.tmp"

      if [ $# = 1 ]
      then
        cat > "datafilepath"
      elif [ $# = 2 ]
      then
        datafilepath=$2
      else
        perror "Invalid arguments(s). Too many provided."
      fi

      if [ ! -r $datafilepath ]
      then
        perror "Cannot read file.  Cannot find mean."
      else
        tpose $datafilepath                                         # Transpose the file before running it thru meanAVG
        transposedDFP=$_RET
        meanAVG $transposedDFP
        cat "$_RET"
      fi;;

    "add")
      if [ ! $# = 3 ]
      then
        perror "Error. 2 matricies were not provided."
      elif [ ! -r $2 ] || [ ! -r $3 ]
      then
        peror "Error. Argument files could not be read."
      else
        leftMatrix=$2
        rightMatrix=$3
        leftDims=$(findDims $leftMatrix)			    # Check dimensions, make sure its valid
        rightDims=$(findDims $rightMatrix)
    
        if [ ! "$leftDims" == "$rightDims" ]
        then
	        perror "Error. Matricies not the same size, cannot add."
        else
          addInternal $leftMatrix $rightMatrix
          cat "$_RET"
          printf '\n'
        fi

      fi;;

   
   "multiply")
      if [ ! $# = 3 ]
      then
        perror "Error. 2 matricies were not provided."
      elif [ ! -r $2 ] || [ ! -r $3 ]
      then
        peror "Error. Argument files could not be read."
      else
        leftMatrix=$2
        rightMatrix=$3

      # check that left Cols == right rows
        findCols $leftMatrix
        leftCols=$_RET
        findRows $rightMatrix
        rightRows=$_RET

        if [ ! "$leftCols" == "$rightRows" ]
        then
          perror "Error. Matricies are not multiply compatiable."
        else
          mult $leftMatrix $rightMatrix
          cat "$_RET"
        fi

      fi;;

    *)			

      perror "You may be missing an operation in your execute.";

      exit 1

  esac      # end switch statements
}
###############################  end wrapper function  ################################################



########     Main script      ###############
wrapper $@


########     End main script   ##############
